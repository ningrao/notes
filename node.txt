set NODE_PATH=%AppData%\npm\node_modules 
@) install downloaded package in linux:
1. wget https://nodejs.org/dist/v6.7.0/node-v6.7.0-linux-x86.tar.gz
2. Extract what you downloaded:
tar xzvf node-v6.7.0-linux-x64.tar.gz

3. Change the file ownership:
sudo chown -Rv root.root node-v6.7.0-linux-x64

4. Install files in /usr/local
sudo cp -Rvi node-v6.7.0-linux-x64/{bin,include,lib,share} /usr/local
# (change -Rvi to -Rvf if you want to overwrite existing files)

@) execute locally installed binary (in node_modules/.bin)
	PATH=$(npm bin):$PATH cmd

---------------------------------
 npm 
---------------------------------
@) semver
 *) ~: 1.1.x
 *) ^: 1.x.x

@) resolved registry in installeed node_modules take precedence
  if that is installed from a specified mirror registry, may get multiple registries which **pollutes** package-lock.json

@) install location:
 *) win: %appdata%\npm\node_modules
 *) linux: /usr/lib/node_modules

# by default it installs dependencies flat, conflicting versions are installed nestedly.

@) 'npm no such file or directory, ... .staging ...' 

remove package-lock.json

@) npm install will remove those not included in pakcage.json;

@) run arbitrary script in 'scripts' of 'package.json'
	npm run name
 *) &&(serial), &, >, <, |
 *) local node_modules takes precedence;
 *) local command resides in 'node_modules/.bin/';
 *) then os command;
 **`cwd` is set to package root**

@) module for os command:
 *) rimraf: rm
 *) mkdirp: mkdir
 *) cpx: cp
 *) fs-extra: all above and others(don't support blob);

@) name@latest to ensure the lastest version is installed;

@) published package usually contains /lib (source codes) and /dist (compiled);
 *) 'npm publish' picks files listed in 'files' field of package.json;

@) files: ['/dist']
**leading slashing ensure exactness**

@) main: 'dist'
**no leading slash**

@) package.json keys:
 *) id, type, _*, $*: package registries;
 *) custom: com_baidu.www
 *) read in nodejs: process.env.npm_package_key_subkey

@) 'bin' in package.json tell npm install '.cmd' in '.bin', specify open program at the start if needed;

@) npm-shrinkwrap.json totally the same with package-lock.json
 *) npm-shrinkwrap.json is used for publishing to npm;
 *) package-lock.json always reflects the latest repository;

@) scrips key corresponding to life-cycle events name are executed automatically(preinstall, posttest...);
 *) prepublish: before 'npm i' and published;

@) show package.json of a package in registry:
	npm view pkg [item]
  - `version` all versions.
@) show version of a local package:
	cd dir
	npm version

@) list all versions
npm view pkg versions

@) peer deps
npm info pkg peerDependencies


@) read/write npm config:
	npm config set/get opt

@) 'devDependencies' 
 *) installed in current directory as 'npm i'(except specify --production or 'NODE_ENV' of value 'production');
 *) won't install in package as 'npm i pkg'(except specify --development or 'NODE_ENV' of value 'development');

@) 'peerDependencies' won't be installed with version not earlier than 3.0;
 *) used for a plugin, specifies which version of host this works for;
 *) if warning appears, things must be that the installed host doesn't match with this plugin, or no host is installed yet;

@) 'peerDependencies' should be duplicated in 'devDependencies' if testing is wanted.

@) list installed dependencies:
npm list [-g] pkg

@) show detail:
npm info [-g] pkg

@) npm prune: move duplicate module to the common ancestor;

@) link dependency to global module;
 *) npm install --link
 *) npm link
 *) in npmrc: link=true

@) global package is installed in directory specified by config 'prefix';

@) browserify:
 *) 'process' module:
 	.) nextTick
	.) browser
@) load 'jsx' in nodejs: node-jsx

@) npm-run-all/npm-s/npm-p: sequential by default;

@) test if installed standalone
```
  "postinstall": "node -e \"JSON.parse(process.env['npm_config_argv']).remain[0] && process.exit(1)\" && npm run install-flow || echo",
```

## prevent package-lock.json update unrelated packages
1. remove node_modules
1. `npm cache clean --force`
1. revert package-lock.json
1. `npm i`

## `npm i/ci`
install all four kinds dependencies.
- respect `--omit=...`
- `--production` equal to `--omit=dev`
- both exists in dependencies and omited, will be omited.

- `ci` still consults `package.json` as source of truth, if `dependencies` in `package-lock.json` is empty (the file should exist however)

## only `npm i` without specific module specified could hoist

## list versions
`npm version pkg versions`

## install from git
always call `git ls-remote https://....` (with token removed) even for ssh, then `git credential manager` on windows prompt `Connect to Github` window. yarn instead.
- it can not handle multiple accounts either.

## `--omit=peer --omit=dev`
if one appears in 'dev' in current project and in 'peer' of a child project, it will be installed still.

---------------------------------------
express
---------------------------------------
@) router path should start with slash;
router.get('/add', ctrl);

@) in template, variables in 'global' and 'app.locals' are accessible as global;

@) app.get('env') is the value of process.env.NODE_ENV in node, which is set to 'production' or 'development'

@)
router=express.Router();
router.get('/file1',function(){
	req.baseUrl	-> /dir1
	req.path	-> /file1
});
app.use('/dir1', router);

/dir1/file2	->	(in error handler)
	req.baseUrl	-> ''
	req.path	-> /dir1/file1

--------------------------------------------------------------------------------
general
--------------------------------------------------------------------------------
## v8 options allow words to be separated by both dashes (-) or underscores (_).

@) pros
 *) full stack
 *) render html in server;
 *) non-blocking, less resource more requests; suitable for persistent connection;
@) cons
 *) cpu intensive will block response;
 *) relational database less favorable;

@) process.argv: node, js, arg0, arg1....
 
@) process.env: cannot store complex data, will be converted to string when set;
 
@) when deploy, either along with all dependencies or lock down them with shrinkwrap;
 
@) require(): 
  * dynamic module, e.g. load at runtime;

 *)	when load a directory, it checks:
	'main' in package.json	->	index.js	->	index.json	->	index.node -> 'main'
 *) require('pkg')	-> installed package 
 * find in paths in 'module.paths'

	require('./file')	-> local file

 *) `require.main.filename`: the entry module;
 *) require.main.require('util/do'): starts from app root;
 *) 'json' file should has extension or it's treated as js file; or read it manually with `file` api; 
 *) '.js' extension is omited only in relative path;
 *) require.resolve returns the found path;
 *) `~` can not expand, use 'process.env.HOME' instead;
 *) it's not stored in `global`.

## patch require paths after v10
```
// We should work on the same tools with react-script,
// such as Webpack and related.

const path = require('path');
const fromCRA = path.resolve(__dirname, '../node_modules/react-scripts/node_modules/')

module.exports = function(moduleFrom) {
  const { _nodeModulePaths } = module.constructor
  module.constructor._nodeModulePaths = (from) => {
    const paths = _nodeModulePaths.call(this, from)
    paths.unshift(fromCRA)
    return paths
  }
  moduleFrom.paths.unshift(fromCRA)
}
```

@) module.js
 *) _compile(): execute the script

@) secure ways:
 *) least priviledge for accounts;
 *) limit error messages;
 *) HTTP Strict-Transport-Security header to dictate brower only to connect via https;
 	Strict-Transport-Security: max-age=<expire-time>; includeSubDomains
 	
 *) code injection(construct command from user input)
 	.) eval/function
	.) exec/child_process(limit input and access rights)
	.) db command(validate/escape/preparedStatement)
 *) database
 	.) limit rights to db account for different connection for different operations(code injection damage is limited); 
	.) prevent concurrency(atomic: findAndUpdate; lock);
 *) restful api with sessionid in url suffers 'session fixation attack';	-> regenerate id when logged in;

@) use stream for less memory consumption;

@) concurrency occurs when an async operation returned, before its callback executes, another request invokes this asnyc operation again; the latter operation should operate on the value the first callback returns, but it operates on the same one;
	redis.get('key', function(err, value){
		redis.set('key', value * 2);
	});
 *) lock a process wide object in a single process; or external object(database) in cluster; if locked, append to next event loop; (module async-lock) (prevent eternal lock cause by crash with timestamp);
 *) atomic operation;

@) callback hell is deep nested callbacks; 
 *) modularization: move callback to top level with name, even wrapped in a module;
 *) promise;
 *) generator/async&await;

 *) event;
 *) control flow library(async, step,...);

@) better wrap a single task in a seperate module with less than 150 lines;

@) ecma5 support:
	http://node.green/

@) async callback invocation is appended to the event loop; 

@) give callback function a name for stack trace;

@) console.trace() list stack trace;

@) no thread can be created, instead apply child_process;

@) exception:
 *) error-first callback emphasize that each error should be handled;
 *) unhandled exception propagate up to process.on('uncaughtException') is better to be only logged and let the process terminate;
 *) group multiple IO operations in 'domain' is deprecated;

@) process.on('unhandledRejection')	catch promises unhandled rejection;

@) don't listen at 80;

@) default heap size: 1.4G(64bit)/512M(32bit)
- `--max-old-space-size=4096`
- `NODE_OPTIONS="--max-old-space-size=4096"`

@) process.env is variables set on commandline when start node;

@) global variables:
 *) in 'global' object, equivalent to 'window', whose property can be accessed as global variable;
 *) top level variables declared are within the scope of this module, not stored as property of 'global';
 	.) more efficient to access them;

@) three ways to deliver errors(don't mixed sync with async in a function): 
 *) sync: Throw;
 *) asyc: Callback, EventEmitter

@) defined errors should be handled, instead those which are not defined should be delivered;    

@) console actions are synchronous blocking event loop;

@) debug
 *) c(cont)/n(over)/s(in)/o(out)/pause
 - variable
   + run 'repl', then view target variables;
   + exec varName (better than repl for reading variable once);
 *) exec console.log('');
 *) sb/cb/breakpoints([file,] line) 
 *) scripts: list loaded scripts
 *) watch/unwatch/watchers expr
 *) list(num): list lines;
 *) backtrace(bt)
 *) run: start again
 *) restart

@) `node inspect` debug in cmd; 
@) `node --inspect` debug in chrome DevTool; 

@) set port: `node --inspect/debug=5858`; 

@) prevent copy&paste address to debug nodejs:

	chrome://inspect/#devices -> open dedicated DevTools for Node

  - multiple instances listed


@) `node debug` may work more stably than `node inspect` in some version or some api, or vice versa.

@) if upper variables of closure are not refered in this scope, it can not be read in debugger.

### child process;
* pass debug argument to child process
* if child cannot be paused, combine console and chrome (inspect & debug)


@) when run in debug mode, don't redirect output like this:
node debug path > file

@) view long strings when debug:
  exec console.error(longString);


@) redirect console output:
	node path 1>file

@) auto garbage collection(-nouse-idle-notification) can be reduced and do it manually(-expose_gc: gc());

@) to use strict mode, set node flag for application, or add directive in page;


@) use sync io method only when init;

@) install multiple nodejs, use node package: 'n' 


@) console
 *) sync: terminal/file
 *) async: |
 *) color (syntax same to bash: \e[*m --> \x1b[*m ): ('\x1b[32m%s\x1b[0m', 'string');

node app.js 2>err.log | tee 'app.log'
2:sync; &1:async;

@) always log to stdout/stderr, leave log routing to supervisor process;

@) async event precedence:
I/O	-> setImmediate	-> setTimeout/Interval	-> process.nextTick ->[rewind]

@) jade, add plain text, prefix '|' in a line or add suffix '.' after the tag;

@) strongloop / strong-pm (the former includes the latter);
 *) create strong-pm service: 'slc pm-install' / 'sl-pm-install'
 *) run strong-pm as transient process: 'slc pm' / 'sl-pm'
 *) install as systemd service: slc pm-install --systemd
 *) slc ctl	/	sl-pmctl

 *) file deployed in 'svc' under '--base';

@) child_process:
  *) spawn('command', [args], options)
    - spawn('command arg1 arg2', [], {shell: true, stdio: 'inherit'})
  *) fork: nodejs process (comand line arguments are inherited - process.execArgv, such as debug)
    - inject debug arg: process.execArgv.unshift('--inspect-brk')
	*) exec: subshell
	*) execFile: process
  *) interaction:
    * pass callback to receive results once terminated
    * register event on created process to receive messages on time.
  *) stdio: default is pipe
    * pipe: parent.stdio.pipe(child.stdio); the pipes (child.stdout/stdin/stderr) are also available to other streams.
    * inherit: child.stdio === parent.stdio
      redirect all to parents.

@) kill child process and its descendents:
   const child = spawn('node', ['node_modules/babel-cli/bin/babel-node.js', 'test.js'], {detached:true});
   process.kill(-child.pid);

 * in windows
  - path seperator should be '\'
  - '.cmd' can not omited.

@) path.resolve
 *) returns an absolute path; 
 *) from right to left, the last supplied absolute path supersedes the formers (abandoned);
 *) if none is supplied, cwd is applied;

@) url.resolve vs url. 

@) --preserve-symlinks omit 'main' file (entry file);

@) debug inline: `node inspect[-brk]`

@) debug in chrome: `node --inspect[-brk]`

@) remove module cache:
`delete require.cache[require.resolve('name')]`

@) require loads file with `require('module')._load`.

@) call setImmediate/nextTick to mimic event loop;
function run(){
  setImmediate(fun);
}

@) if process.on('SITTERM') handler exists, process will transfer the work to terminate to the handler.

@) detect system:
  process.platform === 'linux'
@) parent process will not quit if child is running.

@) call promise in async function, ensure cb is called:
function(args, cb) {
  returnPromise().then(function() {}, cb);
}


@) execute install script only when in standalone, e.g. not as dependency

  "postinstall": "node -e \"JSON.parse(process.env['npm_config_argv']).remain[0] && process.exit(1)\" && installflow || echo"

@) 'find-cache-dir' stores cache in 'node_modules/.cache'

# setTimeout holds event loop open by default (timer.ref() was called, to turn off, call timer.unref()).

## task queue
macro task -> micro task -> macro task
              micro task              
              micro task              
              micro task              
              (...exhausted)

* macrotasks (new event loop): setTimeout, setInterval, setImmediate, requestAnimationFrame, I/O, UI rendering
* microtasks: process.nextTick, Promises, Object.observe, MutationObserver
  - `process.maxTickDepth` prevent that micro tasks queue another to incur indefinite loop

## node-sass
`npm rebuild node-sass --force --verbose`

## module type in `.js` is specified by `type: 'module'/'commonjs'` in package.json
- or explicitly with extensions ".cjs/mjs"
  + they can not be omited
